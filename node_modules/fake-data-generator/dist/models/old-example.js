'use strict';

var _faker = require('faker');

var _faker2 = _interopRequireDefault(_faker);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _helpers = require('../lib/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_faker2.default.locale = 'es';
var randomize = _faker2.default.helpers.randomize;


var shipmentContentTypes = require('../fixtures/shipment-content-types.json');
var truckTypes = require('../fixtures/truck-types.json');
var trailerTypes = require('../fixtures/trailer-types.json');
var packagingTypes = require('../fixtures/packaging-types.json');
var productTypes = require('../fixtures/product-types.json');

var Model = function Model() {
  var dateFormat = 'DD/MM/YYYY';
  var createdAt = _faker2.default.date.recent();

  var originStartShippingPeriod = randomize(['', (0, _moment2.default)(createdAt).add(3, 'days').format()]);
  var originEndShippingPeriod = originStartShippingPeriod === '' ? '' : (0, _moment2.default)(createdAt).add(10, 'hours').format();
  var destinationStartShippingPeriod = randomize(['', (0, _moment2.default)(createdAt).add(20, 'days').format()]);
  var destinationEndShippingPeriod = destinationStartShippingPeriod === '' ? '' : (0, _moment2.default)(createdAt).add(20, 'days').add(10, 'hours').format();

  var statusArray = ['En Espera'];

  var origin = {
    coordinates: (0, _helpers.getLocation)(),
    address: {
      city: _faker2.default.address.city(),
      state: _faker2.default.address.state(),
      streetAddress: _faker2.default.address.streetAddress(),
      country: _faker2.default.address.country()
    },
    shippingPeriod: {
      start: originStartShippingPeriod,
      end: originEndShippingPeriod
    }
  };
  var destination = {
    coordinates: (0, _helpers.getLocation)(),
    address: {
      city: _faker2.default.address.city(),
      state: _faker2.default.address.state(),
      streetAddress: _faker2.default.address.streetAddress(),
      country: _faker2.default.address.country()
    },
    shippingPeriod: {
      start: destinationStartShippingPeriod,
      end: destinationEndShippingPeriod
    }
  };

  var args = {
    id: _helpers.numbers.randomBetween(1, 250000),
    createdAt: createdAt,
    origin: {
      coordinates: {
        latitude: origin.coordinates.latitude,
        longitude: origin.coordinates.longitude,
        status: 'WAITING'
      },
      address: {
        city: origin.address.city,
        state: origin.address.state,
        streetAddress: origin.address.streetAddress,
        country: origin.address.country
      },
      shippingPeriod: origin.shippingPeriod
    },
    destination: {
      coordinates: {
        latitude: destination.coordinates.latitude,
        longitude: destination.coordinates.longitude,
        status: 'WAITING'
      },
      address: {
        city: destination.address.city,
        state: destination.address.state,
        streetAddress: destination.address.streetAddress,
        country: destination.address.country
      },
      shippingPeriod: destination.shippingPeriod
    },
    shipment: {
      status: randomize(statusArray),
      shipmentContentTypes: randomize(shipmentContentTypes),
      type: "Completa",
      packagingType: randomize(packagingTypes),
      productType: randomize(productTypes),
      truck: {
        quantity: _helpers.numbers.randomBetween(1, 10),
        truckType: randomize(truckTypes),
        trailerType: randomize(trailerTypes)
      },
      hasCustody: _faker2.default.random.boolean(),
      hasAssurance: _faker2.default.random.boolean(),
      bidder: {
        id: _helpers.numbers.randomBetween(1, 250000),
        name: _faker2.default.name.firstName() + ' ' + _faker2.default.name.lastName(),
        telephone: _faker2.default.phone.phoneNumber(),
        email: _faker2.default.internet.email(),
        bidValue: _helpers.numbers.randomBetween(10000, 200000)
      }
    }
  };
  return args;
};

// We use module.exports to dynamically require the model
module.exports = {
  Model: Model
};